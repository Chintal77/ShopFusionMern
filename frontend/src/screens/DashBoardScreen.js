import React, { useContext, useEffect, useReducer } from 'react';
import Chart from 'react-google-charts';
import axios from 'axios';
import { Store } from '../Store';
import { getError } from '../utils';
import LoadingBox from '../components/LoadingBox';
import MessageBox from '../components/MessageBox';
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import Card from 'react-bootstrap/Card';
import Button from 'react-bootstrap/Button';
import Table from 'react-bootstrap/Table';
import {
  FaUser,
  FaShoppingCart,
  FaRupeeSign,
  FaBox,
  FaUndo,
} from 'react-icons/fa';

const reducer = (state, action) => {
  switch (action.type) {
    case 'FETCH_REQUEST':
      return { ...state, loading: true };
    case 'FETCH_SUCCESS':
      return { ...state, summary: action.payload, loading: false };
    case 'FETCH_FAIL':
      return { ...state, loading: false, error: action.payload };
    default:
      return state;
  }
};

export default function DashboardScreen() {
  const [{ loading, summary, error }, dispatch] = useReducer(reducer, {
    loading: true,
    error: '',
  });
  const { state } = useContext(Store);
  const { userInfo } = state;
  const refunds = summary?.refunds || { count: 0, totalRefunded: 0 };

  const cancelledCount = summary?.orderStats?.cancelledCount || 0;
  const cancelledRevenue = summary?.orderStats?.cancelledRevenue || 0;
  const unpaidCount = summary?.orderStats?.unpaidCount || 0;
  const unpaidRevenue = summary?.orderStats?.unpaidRevenue || 0;

  const adjustedToBeCollectedCount = Math.max(0, unpaidCount - cancelledCount);
  const adjustedToBeCollectedRevenue = Math.max(
    0,
    unpaidRevenue - cancelledRevenue
  );

  useEffect(() => {
    const fetchData = async () => {
      try {
        const { data } = await axios.get('/api/orders/summary', {
          headers: { Authorization: `Bearer ${userInfo.token}` },
        });
        dispatch({ type: 'FETCH_SUCCESS', payload: data });
      } catch (err) {
        dispatch({
          type: 'FETCH_FAIL',
          payload: getError(err),
        });
      }
    };
    fetchData();
  }, [userInfo]);

  return (
    <div className="mt-4 px-3">
      <h1 className="mb-5 fw-bold text-primary text-center">
        üìä Admin Dashboard
      </h1>

      {loading ? (
        <LoadingBox />
      ) : error ? (
        <MessageBox variant="danger">{error}</MessageBox>
      ) : (
        <>
          {/* Summary Cards */}
          <Row className="g-4">
            <Col md={4}>
              <Card className="shadow-sm border-0 rounded-4 hover-shadow">
                <Card.Body className="text-center">
                  <FaUser size={36} className="mb-2 text-info" />
                  <Card.Title className="display-6 fw-semibold">
                    {summary.users?.[0]?.numUsers || 0}
                  </Card.Title>
                  <Card.Text className="text-muted text-uppercase">
                    Total Users
                  </Card.Text>
                </Card.Body>
              </Card>
            </Col>
            <Col md={4}>
              <Card className="shadow-sm border-0 rounded-4 hover-shadow">
                <Card.Body className="text-center">
                  <FaShoppingCart size={36} className="mb-2 text-warning" />
                  <Card.Title className="display-6 fw-semibold">
                    {summary.orders?.[0]?.numOrders || 0}
                  </Card.Title>
                  <Card.Text className="text-muted text-uppercase">
                    Total Orders
                  </Card.Text>
                </Card.Body>
              </Card>
            </Col>
            <Col md={4}>
              <Card className="shadow-sm border-0 rounded-4 bg-success text-white">
                <Card.Body className="text-center">
                  <FaRupeeSign size={36} className="mb-2" />
                  <Card.Title className="fs-3 fw-bold">
                    ‚Çπ {summary.orderStats?.paidRevenue?.toFixed(2) || '0.00'}
                  </Card.Title>
                  <Card.Text className="small">
                    Total revenue (paid only) generated by ShopFusion
                  </Card.Text>
                </Card.Body>
              </Card>
            </Col>
          </Row>

          <Row className="g-4 mt-3">
            <Col md={4}>
              <Card className="shadow-sm border-0 rounded-4 bg-primary text-white">
                <Card.Body className="text-center">
                  <FaShoppingCart size={36} className="mb-2 text-white" />
                  <Card.Title className="display-6 fw-semibold">
                    {summary.todayOrdersCount || 0}
                  </Card.Title>
                  <Card.Text className="text-white-50 text-uppercase">
                    Orders Placed Today
                  </Card.Text>
                </Card.Body>
              </Card>
            </Col>
          </Row>

          {/* Order Status Breakdown */}
          <Row className="g-4 mt-4">
            <Col md={3}>
              <Card className="shadow-sm border-0 rounded-4 bg-danger text-white">
                <Card.Body className="text-center">
                  <Card.Title className="fs-4 fw-bold">
                    {summary.orderStats.cancelledCount} Orders
                  </Card.Title>
                  <Card.Text className="mb-1">‚ùå Cancelled</Card.Text>
                  <Card.Text>
                    ‚Çπ {summary.orderStats.cancelledRevenue.toFixed(2)}
                  </Card.Text>
                </Card.Body>
              </Card>
            </Col>
            <Col md={3}>
              <Card className="shadow-sm border-0 rounded-4 bg-success text-white">
                <Card.Body className="text-center">
                  <Card.Title className="fs-4 fw-bold">
                    {summary.orderStats.deliveredCount} Orders
                  </Card.Title>
                  <Card.Text className="mb-1">‚úÖ Delivered</Card.Text>
                  <Card.Text>
                    ‚Çπ {summary.orderStats.deliveredRevenue.toFixed(2)}
                  </Card.Text>
                </Card.Body>
              </Card>
            </Col>
            <Col md={3}>
              <Card className="shadow-sm border-0 rounded-4 bg-warning text-dark">
                <Card.Body className="text-center">
                  <Card.Title className="fs-4 fw-bold">
                    {adjustedToBeCollectedCount} Orders
                  </Card.Title>
                  <Card.Text className="mb-1">üí∞ To Be Collected</Card.Text>
                  <Card.Text>
                    ‚Çπ {adjustedToBeCollectedRevenue.toFixed(2)}
                  </Card.Text>
                </Card.Body>
              </Card>
            </Col>

            <Col md={3}>
              <Card className="shadow-sm border-0 rounded-4 bg-info text-white">
                <Card.Body className="text-center">
                  <Card.Title className="fs-4 fw-bold">
                    {summary.orderStats.paidCount} Orders
                  </Card.Title>
                  <Card.Text className="mb-1">üíµ Total Revenue</Card.Text>
                  <Card.Text>
                    ‚Çπ {summary.orderStats.paidRevenue.toFixed(2)}
                  </Card.Text>
                </Card.Body>
              </Card>
            </Col>
          </Row>

          <hr className="my-5 text-muted" />

          {/* Low Stock Products */}
          <Card className="shadow-sm border-0 rounded-4 mb-4">
            <Card.Body>
              <h2 className="fw-bold text-secondary mb-3">
                ‚ö†Ô∏è Low Stock Products
              </h2>
              {summary.lowStockProducts?.length > 0 ? (
                <ul className="list-group">
                  {summary.lowStockProducts.map((item, index) => (
                    <li
                      key={index}
                      className="list-group-item d-flex justify-content-between"
                    >
                      <span>{item.name}</span>
                      <span className="text-danger fw-semibold">
                        Only {item.countInStock} left
                      </span>
                    </li>
                  ))}
                </ul>
              ) : (
                <MessageBox>All products are sufficiently stocked</MessageBox>
              )}
            </Card.Body>
          </Card>

          {/* Refund Summary */}
          <h2 className="fw-bold mt-5 mb-3 text-danger">üí∏ Refund Summary</h2>
          <Row className="mb-3">
            <Col md={6}>
              <Card>
                <Card.Body>
                  <Card.Title>Total Refunds: {refunds.count}</Card.Title>
                  <Card.Text>
                    Total Refunded: ‚Çπ{refunds.totalRefunded.toFixed(2)}
                  </Card.Text>
                </Card.Body>
              </Card>
            </Col>
          </Row>

          {/* Sales Overview Chart */}
          <Card className="shadow-sm border-0 rounded-4 mb-5">
            <Card.Body>
              <h2 className="fw-bold text-secondary mb-4">üìà Sales Overview</h2>
              {summary.dailyOrders.length === 0 ? (
                <MessageBox>No sales data available</MessageBox>
              ) : (
                <Chart
                  width="100%"
                  height="400px"
                  chartType="AreaChart"
                  loader={<div>Loading Chart...</div>}
                  data={[
                    ['Date', 'Sales', 'Orders'],
                    ...summary.dailyOrders.map((x) => [
                      x._id,
                      Number(x.sales || 0),
                      Number(x.orders || 0),
                    ]),
                  ]}
                  options={{
                    hAxis: { title: 'Date' },
                    vAxis: { minValue: 0 },
                    colors: ['#0d6efd', '#f39c12'],
                    areaOpacity: 0.25,
                    legend: { position: 'bottom' },
                  }}
                />
              )}
            </Card.Body>
          </Card>

          {/* Product Categories */}
          <Card className="shadow-sm border-0 rounded-4 mb-5">
            <Card.Body>
              <h2 className="fw-bold text-secondary mb-4">
                üì¶ Product Categories
              </h2>
              {summary.productCategories.length === 0 ? (
                <MessageBox>No categories available</MessageBox>
              ) : (
                <Chart
                  width="100%"
                  height="400px"
                  chartType="PieChart"
                  loader={<div>Loading Chart...</div>}
                  data={[
                    ['Category', 'Products'],
                    ...summary.productCategories.map((x) => [x._id, x.count]),
                  ]}
                  options={{
                    pieHole: 0.4,
                    colors: [
                      '#ff6b6b',
                      '#4dabf7',
                      '#ffd43b',
                      '#69db7c',
                      '#845ef7',
                    ],
                    legend: { position: 'right', textStyle: { fontSize: 14 } },
                  }}
                />
              )}
            </Card.Body>
          </Card>

          {/* Payment Methods Distribution */}
          <Card className="shadow-sm border-0 rounded-4 mb-5">
            <Card.Body>
              <h2 className="fw-bold text-secondary mb-4">
                üí≥ Payment Methods Used
              </h2>
              {summary.paymentMethods.length === 0 ? (
                <MessageBox>No payment method data available</MessageBox>
              ) : (
                <Chart
                  width="100%"
                  height="400px"
                  chartType="PieChart"
                  loader={<div>Loading Chart...</div>}
                  data={[
                    ['Payment Method', 'Orders'],
                    ...summary.paymentMethods.map((x) => [
                      x._id || 'Unknown',
                      x.count,
                    ]),
                  ]}
                  options={{
                    pieHole: 0.4,
                    colors: [
                      '#5c7cfa',
                      '#ff922b',
                      '#63e6be',
                      '#e64980',
                      '#fab005',
                    ],
                    legend: { position: 'right', textStyle: { fontSize: 14 } },
                  }}
                />
              )}
            </Card.Body>
          </Card>
        </>
      )}
    </div>
  );
}
