import React, { useContext, useEffect, useReducer } from 'react';
import Chart from 'react-google-charts';
import axios from 'axios';
import { Store } from '../Store';
import { getError } from '../utils';
import LoadingBox from '../components/LoadingBox';
import MessageBox from '../components/MessageBox';
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import Card from 'react-bootstrap/Card';
import { FaUser, FaShoppingCart, FaRupeeSign } from 'react-icons/fa';

const reducer = (state, action) => {
  switch (action.type) {
    case 'FETCH_REQUEST':
      return { ...state, loading: true };
    case 'FETCH_SUCCESS':
      return { ...state, summary: action.payload, loading: false };
    case 'FETCH_FAIL':
      return { ...state, loading: false, error: action.payload };
    default:
      return state;
  }
};

export default function DashboardScreen() {
  const [{ loading, summary, error }, dispatch] = useReducer(reducer, {
    loading: true,
    error: '',
  });
  const { state } = useContext(Store);
  const { userInfo } = state;

  useEffect(() => {
    const fetchData = async () => {
      try {
        const { data } = await axios.get('/api/orders/summary', {
          headers: { Authorization: `Bearer ${userInfo.token}` },
        });
        dispatch({ type: 'FETCH_SUCCESS', payload: data });
      } catch (err) {
        dispatch({
          type: 'FETCH_FAIL',
          payload: getError(err),
        });
      }
    };
    fetchData();
  }, [userInfo]);

  return (
    <div className="mt-4 px-3">
      <h1 className="mb-4 fw-bold text-primary text-center">
        ðŸ“Š Admin Dashboard
      </h1>
      {loading ? (
        <LoadingBox />
      ) : error ? (
        <MessageBox variant="danger">{error}</MessageBox>
      ) : (
        <>
          <Row className="g-4">
            <Col md={4}>
              <Card className="shadow border-0">
                <Card.Body className="text-center">
                  <FaUser size={32} className="mb-2 text-info" />
                  <Card.Title className="fs-3 fw-bold">
                    {summary.users && summary.users[0]
                      ? summary.users[0].numUsers
                      : 0}
                  </Card.Title>
                  <Card.Text className="text-muted">Total Users</Card.Text>
                </Card.Body>
              </Card>
            </Col>

            <Col md={4}>
              <Card className="shadow border-0">
                <Card.Body className="text-center">
                  <FaShoppingCart size={32} className="mb-2 text-warning" />
                  <Card.Title className="fs-3 fw-bold">
                    {summary.orders && summary.users[0]
                      ? summary.orders[0].numOrders
                      : 0}
                  </Card.Title>
                  <Card.Text className="text-muted">Total Orders</Card.Text>
                </Card.Body>
              </Card>
            </Col>

            <Col md={4}>
              <Card className="shadow border-0 bg-success text-white">
                <Card.Body className="text-center">
                  <FaRupeeSign size={32} className="mb-2" />
                  <Card.Title className="fs-4 fw-semibold">
                    â‚¹{' '}
                    {summary.orders && summary.users[0]
                      ? summary.orders[0].totalSales.toFixed(2)
                      : 0}
                  </Card.Title>
                  <Card.Text className="small">
                    Total revenue generated by ShopFusion
                  </Card.Text>
                </Card.Body>
              </Card>
            </Col>

            <Col md={4}>
              <Card className="shadow border-0 bg-primary text-white">
                <Card.Body className="text-center">
                  <FaShoppingCart size={32} className="mb-2 text-white" />
                  <Card.Title className="fs-3 fw-bold">
                    {summary.todayOrdersCount || 0}
                  </Card.Title>
                  <Card.Text className="text-white-50">
                    Orders Placed Today
                  </Card.Text>
                </Card.Body>
              </Card>
            </Col>
          </Row>

          <hr className="my-5" />

          <div className="my-4">
            <h2 className="fw-bold mb-3 text-secondary">ðŸ“ˆ Sales Overview</h2>
            {summary.dailyOrders.length === 0 ? (
              <MessageBox>No sales data available</MessageBox>
            ) : (
              <div className="p-3 bg-white rounded shadow">
                <Chart
                  width="100%"
                  height="400px"
                  chartType="AreaChart"
                  loader={<div>Loading Chart...</div>}
                  data={[
                    ['Date', 'Sales', 'Orders'],
                    ...summary.dailyOrders.map((x) => [
                      x._id,
                      Number(x.sales || 0),
                      Number(x.orders || 0),
                    ]),
                  ]}
                  options={{
                    title: 'Daily Sales, Orders & Revenue',
                    hAxis: { title: 'Date', titleTextStyle: { color: '#333' } },
                    vAxis: { minValue: 0 },
                    colors: ['#0d6efd', '#f39c12', '#28a745'], // Customize colors
                    areaOpacity: 0.2,
                    tooltip: { isHtml: true },
                    series: {
                      0: { targetAxisIndex: 0 }, // Sales
                      1: { targetAxisIndex: 1 }, // Orders
                      2: { targetAxisIndex: 2 }, // Revenue
                    },
                    vAxes: {
                      0: { title: 'Sales (â‚¹)' },
                      1: { title: 'Orders' },
                      2: { title: 'Revenue (â‚¹)' },
                    },
                  }}
                />
              </div>
            )}
          </div>

          <div className="my-4">
            <h2 className="fw-bold mb-3 text-secondary">
              ðŸ“¦ Product Categories
            </h2>
            {summary.productCategories.length === 0 ? (
              <MessageBox>No categories available</MessageBox>
            ) : (
              <div className="p-3 bg-white rounded shadow">
                <Chart
                  width="100%"
                  height="400px"
                  chartType="PieChart"
                  loader={<div>Loading Chart...</div>}
                  data={[
                    ['Category', 'Products'],
                    ...summary.productCategories.map((x) => [x._id, x.count]),
                  ]}
                  options={{
                    title: 'Product Categories Distribution',
                    pieHole: 0.4,
                    colors: [
                      '#ff6b6b',
                      '#4dabf7',
                      '#ffd43b',
                      '#69db7c',
                      '#845ef7',
                    ],
                    legend: { position: 'right', textStyle: { fontSize: 14 } },
                  }}
                />
              </div>
            )}
          </div>
        </>
      )}
    </div>
  );
}
